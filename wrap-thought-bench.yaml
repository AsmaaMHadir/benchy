plan_name: "wrap-thought-bench"

pattern: listv1

mode: "architect" # "architect" or "coder"

main_model: "deepseek/deepseek-reasoner"

editor_model: "deepseek/deepseek-chat" # used only if mode is "architect"

editable_context:
  - "src/App.vue"
  - "src/pages/ThoughtBench.vue"
  - "src/stores/thoughtBenchStore.ts"
  - "src/types.d.ts"
  - "src/components/thought_bench/ThoughtColumn.vue"
  
  - "server/utils.py"
  - "server/server.py"
  - "server/modules/ollama_llm.py"
  - "server/modules/data_types.py"
  - "server/modules/llm_models.py"
  - "server/modules/deepseek_llm.py"
  - "server/tests/ollama_llm_test.py"
  - "server/tests/deepseek_llm_test.py"
  - "server/tests/utils_test.py"

readonly_context:
  - "README.md"
  - "src/stores/toolCallStore.ts"
  - "src/stores/isoSpeedBenchStore.ts"
  - "src/pages/IsoSpeedBench.vue"
  - "src/components/iso_speed_bench/IsoSpeedBenchRow.vue"
  - "server/modules/anthorpic_llm.py"
  - "server/modules/openai_llm.py"
  - "server/modules/gemini_llm.py"
  - "src/utils.ts"

high_level_objective: "Finishing Thought Bench"

# your list of tasks aka prompts that will be executed in order one by one
tasks:
  - title: "Add Icons to Thought Bench Columns"
    prompt: |
      UPDATE src/components/thought_bench/ThoughtColumn.vue:
        ADD icons to the columns based on the model prefix "ollama:" or "deepseek:" etc.
        MIRROR isoSpeedBench
  - title: "Add text field to Thought Bench to add arbitrary models"
    prompt: |
      UPDATE src/pages/ThoughtBench.vue, thoughtBenchStore.ts:
        ADD a new 'newModel' text field to add arbitrary models to the thought bench
          Activate on enter key press
          Place below the prompt text area.
          On enter key this will add a model to dataColumns
  - title: "Add pills for every dataColumn"
    prompt: |
      UPDATE src/pages/ThoughtBench.vue, thoughtBenchStore.ts:
        flex justify between from the 'newModel' text field, show a pill for every model in dataColumns.
        each pill should have a delete icon (emoji). on delete remove the model from dataColumns, update local storage (should be automatic)
        for each pill add a 'eye' icon (emoji) with an active and inactive state. here we're going to 'solo' it like in music software when we solo music track only here we're soloing visibility.
        for this we'll add a 'soloedModels' ref in ThoughtBench.vue. If the model is in the array it's soloed along with any othe rmodels in the array. if the array is empty (default) show all models.
        so every pill will have pill "model" -- flex between -- controls: "eye" icon (emoji) -- "delete" icon (emoji)
        let's also generate light background colors for the pills using stringToColor(model_name). update the ThoughtColumn.vue to use this color as the background for the model name text.
  - title: "Add support to run non-thought models"
    prompt: |
      UPDATE server/modules/llm_models.py:
        UPDATE thought_prompt to support non-thought models.
          instead of throwing if not a thought model. fallback to the respective providers text_prompt function, then on the way up convert it to a ThoughtResponse and set ThoughtResponse.thoughts to an empty string.
          mirror the other models to see which providers we'll support.
          basically we'll just call the text_prompt function and then convert it to a ThoughtResponse.
          be sure to add else statements for ollama and deepseek for non-thought specific models to fallback on text_prompt().